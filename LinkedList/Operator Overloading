#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class node{
public:
    int data;
    node*next;

    node(int d){
        data = d;
        next = NULL;

    }
};


void insertAtHead(node*&head,int d){
    if(head==NULL){
        head = new node(d);
        return;
    }

    node *n = new node(d);
    n->next = head;
    head = n;
}

int length(node*head){
    int cnt=0;
    while(head!=NULL){
        cnt++;
        head = head->next;
    }
    return cnt;
}

void insertAtTail(node*&head,int d){
    if(head==NULL){
        // head = new node(d);
        // return;
        insertAtHead(head,d);
    }

    node*tail = head;
    while(tail->next!=NULL){
        tail = tail->next;
    }
    tail->next = new node(d);
    return;
}

void insertAtMiddle(node*&head,int d,int p){
    if(head==NULL or p==0){
        insertAtHead(head,d);
    }
    else if(p>length(head)){
        insertAtTail(head,d);
    }
    else {
        int jumps = 0;
        node*temp = head;
        while(jumps<p-1){
            temp = temp->next;
            jumps++;
        }
        node*n = new node(d);
        n->next = temp->next;
        temp->next = n;
    }

}

void deleteHead(node*&head){
    if(head==NULL){
        return;
    }
    node*temp = head->next;
    delete head;
    head = temp;
}

void deleteTail(node*&head){
    if(head==NULL){
        return;
    }

    node*tail=head;
    node*prev=head;

    while(tail->next!=NULL){
        tail = tail->next;
    }

    while(prev->next->next!=NULL){
        prev = prev->next;
    }

    delete tail;
    prev->next = NULL;
}

void deleteMiddle(node*&head,int p){
    while(head==NULL){
        return;
    }

    node*prev = head;
    node*target = head;
    int j=0;
    while(j<p-1){
        prev = prev->next;
        j++;
    }
    int k=0;
    while(k<p){
        target = target->next;
        k++;
    }

    prev->next = target->next;
    delete target;

}


//Searching
//Linear search is good as binary search takes 0(N)

bool search(node*head, int key){

    node*temp = head;
    while(temp!=NULL){
        if(head->data==key){
            return true;
        }
        head = head->next;
    }
     return false;
}

//RecursiveSearch
bool recursiveSearch(node*head, int key){

    if(head==NULL){
        return false;
    }

    if(head->data==key){
        return true;
    }

    else{
       return recursiveSearch(head->next,key);
    }
}

//Take input
node* take_input(){
    int d;
    cin>>d;

    node*head=NULL;
    while(d!=-1){
        insertAtHead(head,d);
        cin>>d;

    }
    return head;
}



void print(node*&head){

    while(head!=NULL){
        cout<<head->data;
        cout<<"->";
        head = head->next;
    }
}
ostream& operator<<(ostream &os, node*head){
    print(head);
    return os;
}

istream& operator>>(istream &is, node*&head){
    head = take_input();
    return is;
}

int main() {
    node*head;
    node*head2;
    cin>>head>>head2;
    cout<<head<<head2;
    
}
