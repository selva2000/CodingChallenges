#include <iostream>
#include <vector>

using namespace std;

class node{
    public:
        int data;
        node*next;

        node(int d){
            data = d;
            next = NULL;
        }

};

void insertAtHead(node*&head,int d){
    if(head==NULL){
        head = new node(d);
        return;
    }

    node *n = new node(d);
    n->next = head;
    head = n;
}

node* take_input(){
    int d;
    cin>>d;

    node*head=NULL;
    while(d!=-1){
        insertAtHead(head,d);
        cin>>d;
    }
    return head;
}

void print(node*&head){

    while(head!=NULL){
        cout<<head->data;
        cout<<"->";
        head = head->next;
    }
}

ostream& operator<<(ostream &os, node*head){
    print(head);
    return os;
}

istream& operator>>(istream &is, node*&head){
    head = take_input();
    return is;
}

node*midpoint(node*head){
    if(head==NULL or head->next==NULL){
        return head;
    }

    node*fast = head->next;
    node*slow = head;

    while(fast!=NULL and fast->next!=NULL){
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

node*kthNode(node*head,int k){
	if(head==NULL or head->next==NULL){
		return head;
	}

	node*slow = head;
	node*fast = head;
	node*prev = head;

	int count  = k;

	while(count > 0){
		fast = fast->next;
		count--;
	 }
	while(fast!=NULL){
		slow = slow->next;
		fast = fast->next;
	}

	return slow;

}

node*DeleteKthNode(node*head,int k){
	if(head==NULL or head->next==NULL){
		return head;
	}

	node*slow = head;
	node*fast = head;
	node*prev = head;

	int count  = k;

	while(count > 0){
		fast = fast->next;
		count--;
	 }
	while(fast!=NULL){
		slow = slow->next;
		fast = fast->next;
	}
	int count1 = k;
	while(count1 >= k-1 ){
		prev = prev->next;
		count1--;
	}

	prev->next = slow->next;
	delete slow;
	return head;

	//return slow;

}

node* merge(node*a, node*b){
	//base case
	if(a==NULL){
		return b;
	}
	if(b==NULL){
		return a;
	}

	//To hold new LL
	node*c;

	if(a->data < b->data){
		c = a;
		c->next = merge(a->next, b);
	}
	else {

		c = b;
		c->next = merge(a, b->next);
	}

	return c;
}

node* mergesort(node*head){
	if(head==NULL or head->next ==NULL){
		return head;
	}

	//divide the code
	node* mid = midpoint(head);
	node* a = head;
	node* b = mid->next;

	mid->next = NULL;

	a = mergesort(a);
	b = mergesort(b);

	node* c;
	c = merge(a, b);

	return c;
}

int main() {
    node*head;
	//node*head2;
    cin>>head;
	//cin>>head2;
    cout<<head<<endl;
	//cout<<head2<<endl;

    // node*mid = midpoint(head);
    // cout<<"Mid: "<<mid->data<<endl;

	// node*knode = kthNode(head,3);
	// cout<<"Kth: "<<knode->data<<endl;

	// head = DeleteKthNode(head,3);
	// cout<<head;

	head = mergesort(head);
	cout<<head<<endl;
}
