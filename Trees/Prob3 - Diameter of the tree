#include<iostream>
#include<queue>
using namespace std;


class node{

public:
	int data;
	node* left;
	node* right;

	node(int d){
		data = d;
		left = NULL;
		right = NULL;
	}
};

node* buildTree(){

	int d;
	cin>>d;

	if(d==-1){
		return NULL;
	}

	node* root = new node(d);
	root->left = buildTree();
	root->right = buildTree();
	return root;
}

void print(node* root){//preorder: (N L R)

	if(root==NULL){
		return;
	}

	//print root first and followed by root sub-trees(childerens)
	cout<<root->data<<" ";
	print(root->left);
	print(root->right);

}

void print_inorder(node* root){//Inorder: (L N R)

	if(root==NULL){
		return;
	}

	print_inorder(root->left);
	cout<<root->data<<" ";
	print_inorder(root->right);
}

void print_postorder(node* root){//Post order: (L R N)

	if(root==NULL){
		return;
	}

	print_postorder(root->left);
	print_postorder(root->right);
	cout<<root->data<<" ";
	
}

int height(node* root){

	if(root==NULL){
		return 0;
	}

	int left_side = height(root->left);
	int right_side = height(root->right);
	return max(left_side, right_side) + 1;
}

void kthlevel(node* root, int k){

	if(root==NULL){
		return;
	}

	if(k==1){
		cout<<root->data<<" ";
		return;
	}

	kthlevel(root->left, k-1);
	kthlevel(root->right, k-1);
	return;
}

void allLevel(node* root){

	int H = height(root);

	for(int i=1;i<=H;i++){
		kthlevel(root,i);
		cout<<endl;
	}
	return;
}

void bfs(node* root){

	//conside input:
	//8 10 1 -1 -1 6 9 -1 -1 7 -1 -1 3 -1 14 13 -1 -1 -1

	queue<node*> q; 
	//node - used because i need 1st element(8) of the queue. 
	//node* - used to get address instead copying the data.
	//we did'nt used queue<int> bcoz we know the 1st element is int(8) but we don't know where 8 is stored.

	q.push(root);
	// initially 8
	//Why we are pushing before while loop, bcoz we don't want our queue to be empty.
	q.push(NULL);
	//Immediately adding NULL..

	while(!q.empty()){

		//Getting front element to store
		node* front = q.front(); // intially front = 8
		if(front==NULL){
			cout<<endl; //making new line for each level order
			q.pop();    //poping out NULL.
			if(!q.empty()){
				q.push(NULL); //Adding NULL after the addition of children
			}
		}
		else{
			cout<<front->data<< ",";

		//Poping it
			q.pop();

		//Pushing it childrens if it exist

			if(front->left!=NULL){
				q.push(front->left);
			}

			if(front->right!=NULL){
				q.push(front->right);
			}
		}

	}
	return;
}

int count_nodes(node* root){

		if(root==NULL){
			return 0;
		}

		return 1 + count_nodes(root->left) + count_nodes(root->right);
}

int sum_nodes(node* root){
	if(root==NULL){
		return 0;
	}

	return root->data + sum_nodes(root->left) + sum_nodes(root->right);

}

int diameter(node* root){

	if(root==NULL){
		return 0;
	}

	int h1 = height(root->left);
	int h2 = height(root->right);

	int root_height = h1+h2;

	int left_subtree = diameter(root->left);
	int right_subtree = diameter(root->right);

	return max(root_height, max(left_subtree, right_subtree));
}

class Pair{

public:
	int height;
	int diameter;
};

// we are using pair class - bcoz we need to return both
//height and diameter together for each node.

Pair optimizedDiameter(node* root){

	Pair p;
	if(root == NULL){
		p.height = p.diameter = 0;
		return p;
	}

	//otherwise:

	Pair left = optimizedDiameter(root->left);
	Pair right = optimizedDiameter(root->right);

	p.height = max(left.height, right.height) + 1;
	p.diameter = max(left.height + right.height, max(left.diameter,right.diameter));

	return p;
}


int main(){

	node* root = buildTree();
	/*cout<<"Preorder Traversal: ";
	print(root);
	cout<<endl;

	cout<<"Inorder Traversal: ";
	print_inorder(root);
	cout<<endl;

	cout<<"Postorder Traversal: ";
	print_postorder(root);
	cout<<endl;

	cout<<"Height of the tree: ";
	cout<<height(root);
	cout<<endl;

	cout<<"Kth-Level: ";
	kthlevel(root,3);
	cout<<endl;

	cout<<"All levels - O(N^2) ( using recursion ): "<<endl;
	allLevel(root);
	cout<<endl;

	cout<<"BFS - O(N) (using queue) : "<<endl;
	bfs(root);
	cout<<endl;*/

	cout<<"Total Nodes: "<<count_nodes(root)<<endl;
	cout<<"Sum of the nodes: "<<sum_nodes(root)<<endl;
	cout<<"Diameter of the Tree O(N^2): "<<diameter(root)<<endl;
	Pair p = optimizedDiameter(root);
	cout<<"Optimized Diameter of the Tree O(N): ";
	cout<<p.height<<" ,";
	cout<<p.diameter<<endl;
}
